@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================
@c DO NOT EDIT!  Generated automatically by munge-texi.pl.

@c Copyright (C) 1996-2013 John W. Eaton
@c
@c This file is part of Octave.
@c
@c Octave is free software; you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by the
@c Free Software Foundation; either version 3 of the License, or (at
@c your option) any later version.
@c 
@c Octave is distributed in the hope that it will be useful, but WITHOUT
@c ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
@c FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
@c for more details.
@c 
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <http://www.gnu.org/licenses/>.

@node Evaluation
@chapter Evaluation

式を評価するには通常、Octaveプロンプトでシンプルにそれらをタイプするか、ファイルに保存したコマンドの解釈をOctaveに命令します。

計算されて文字列に格納だれた式の評価が必要なときがあるかもしれません。それはまさに@code{eval}関数が行うことです。

@c eval libinterp/parse-tree/oct-parse.cc
@anchor{XREFeval}
@deftypefn {Built-in Function} {} eval (@var{try})
@deftypefnx {Built-in Function} {} eval (@var{try}, @var{catch})
文字列@var{try}をパースして、それがOctaveプログラムであるかのように評価します。失敗した場合は、オプション文字列@var{catch}を評価します。文字列@var{try}はカレントコンテキストで評価されるので、@code{eval}がリターンした後でも結果を利用できます。

以下はカレントワークスペースで値が約3.1416の変数@var{A}を作成する例です。

@example
eval ("A = acos(-1);");
@end example

@var{try}を評価する間にエラーが発生した場合は、以下の例が示すように@var{catch}文字列が評価されます:

@example
@group
eval ('error ("This is a bad example");',
      'printf ("This error occurred:\n%s\n", lasterr ());');
     @print{} This error occurred:
        This is a bad example
@end group
@end example

プログラミングノート:
@code{eval}を任意文字列の実行ではなくエラーキャプチャリングメカニズムとしてだけ使用する場合はかわりにtry/catchブロックかunwind_protect/unwind_protect_cleanupの使用を考えてください。これらのテクニックは高いパフォーマンスをもち、任意のコードを評価することによるセキュリティ問題は発生しません。
@seealso{@ref{XREFevalin,,evalin}}
@end deftypefn


@menu
* Calling a Function by its Name::
* Evaluation in a Different Context::  
@end menu

@node Calling a Function by its Name
@section Calling a Function by its Name

@code{feval}関数により関数名を含む文字列から関数を実行できます。これはユーザー提供関数を呼び出す必要のある関数の記述に便利です。@code{feval}関数は呼び出す関数の名前を1つ目お引数にとり、残りの引数はその関数に渡されます。

以下は@code{feval}を使用して、ニュートン法により1変数のユーザー提供関数の根を見つける簡単な関数の例です。

@example
function result = newtroot (fname, x)

# usage: newtroot (fname, x)
#
#   fname : a string naming a function f(x).
#   x     : initial guess

  delta = tol = sqrt (eps);
  maxit = 200;
  fx = feval (fname, x);
  for i = 1:maxit
    if (abs (fx) < tol)
      result = x;
      return;
    else
      fx_new = feval (fname, x + delta);
      deriv = (fx_new - fx) / delta;
      x = x - fx / deriv;
      fx = fx_new;
    endif
  endfor

  result = x;

endfunction
@end example

これは単にユーザー提供関数を呼び出す例を意図したもので、あまりシリアスにとるべきではないことに注意してください。さらに、より頑健なアルゴリズムを使用することにより、シリアスなコードは、提供された関数が実際に関数なのか等、すべての引数の数や型をチェックするでしょう。数値オブジェクトにたいする述語については@ref{Predicates
for Numeric Objects}、@code{exist}関数の説明は@ref{Status of Variables}を参照してください。

@c feval libinterp/parse-tree/oct-parse.cc
@anchor{XREFfeval}
@deftypefn {Built-in Function} {} feval (@var{name}, @dots{})
@var{name}という名前の関数を評価します。、2つ目以降の引数は、名前付き関数の入力として渡されます。たとえば、

@example
@group
feval ("acos", -1)
     @result{} 3.1416
@end group
@end example

@noindent
これは引数@samp{-1}で関数@code{acos}を呼び出します。

関数@code{feval}は任意の種類の関数ハンドルとともに使用することもできます。歴史的に、@code{feval}は文字列内のユーザー提供関数を呼び出す唯一の方法でしたが、現在はより明快な構文を提供する関数ハンドルが好まれます。たとえば、

@example
@group
@var{f} = @@exp;
feval (@var{f}, 1)
    @result{} 2.7183
@var{f} (1)
    @result{} 2.7183
@end group
@end example

@noindent
これは同じ方法で@var{f}により参照される関数を呼び出します。@var{f}が関数ハンドル、文字列内の関数名、またはインライン関数なのか事前に予測できない場合は、かわりに@code{feval}を使用してください。
@end deftypefn


ユーザースクリプトファイルを呼び出す同様の関数@code{run}もあります。スクリプトファイルはユーザーのパス上にある必要はありません。

@c run scripts/miscellaneous/run.m
@anchor{XREFrun}
@deftypefn {Command} {} run @var{script}
@deftypefnx {Function File} {} run ("@var{script}")
カレントワークスペース内の@var{script}を実行します。

Octaveのロードパスに指定されたディレクトリに存在し、拡張子が@file{".m"}のスクリプトは、単に名前をタイプして実行できます。ロードパス上にないスクリプトにたいしては、@code{run}を使用します。

ファイル名@var{script}はファイル名のみ、完全ファイル名または相対ファイル名で指定してもよく、拡張子を付けても付けなくても構いません。拡張子が指定されない場合、Octaveは拡張子なしのファイル名にフォールバックする前に、まず拡張子@file{".m"}のスクリプトを検索します。

実装ノート:
@var{script}がパスコンポーネントを含む場合、@code{run}はまず@var{script}を探すディレクトリにディレクトリを変更します。その後@code{run}はスクリプトを実行して、元のディレクトリにリターンします。
@seealso{@ref{XREFpath,,path}, @ref{XREFaddpath,,addpath},
@ref{XREFsource,,source}}
@end deftypefn


@node Evaluation in a Different Context
@section Evaluation in a Different Context

式を評価する前に式内で使用されている変数の値を置き換える必要があります。これらはシンボルテーブルに格納されています。インタープリターが新たに関数を開始するときは常にカレントシンボルテーブルを保存してから新しいシンボルテーブルを作成し、それを関数パラメーターのリストと@code{nargin}のような事前定義された変数を初期化します。関数内の式は、新しいシンボルテーブルを使用します。

呼び出したときに、あなたのコンテキスト内の変数を変更するような関数を記述したいときがあります。これによりCのゆなプログラミング言語でのポインター使用に似た、名前渡しスタイルの関数を使用できます。

m-filesの@code{save}と@code{load}を行う関数を記述する方法を考えてみましょう。たとえば:

@example
@group
function create_data
  x = linspace (0, 10, 10);
  y = sin (x);
  save mydata x y
endfunction
@end group
@end example

@code{evalin}により、以下のように@code{save}を記述できます:

@example
@group
function save (file, name1, name2)
  f = open_save_file (file);
  save_var (f, name1, evalin ("caller", name1));
  save_var (f, name2, evalin ("caller", name2));
endfunction
@end group
@end example

@noindent
ここで@samp{caller}は@code{create_data}関数、@code{name1}は@code{x}を評価されますした値である文字列@qcode{"x"}です。

後で異なるコンテキストで@code{mydata}から値をloadしたい場合

@example
@group
function process_data
  load mydata
  @dots{} do work @dots{}
endfunction
@end group
@end example

@noindent
@code{assignin}により、以下のように@code{load}を記述できます:

@example
@group
function load (file)
  f = open_load_file (file);
  [name, val] = load_var (f);
  assignin ("caller", name, val);
  [name, val] = load_var (f);
  assignin ("caller", name, val);
endfunction
@end group
@end example

@noindent
ここで@samp{caller}は@code{process_data}関数です。

コマンドプロンプトで@samp{caller}ではなくコンテキスト@samp{base}で変数のセットおよび使用ができます。

これらの関数が実際に使用されるのはまれです。1つの例として@code{fail (@samp{code},
@samp{pattern})}関数があります。これは呼び出し側のコンテキストで@samp{code}を評価して、与えられたパターンにマッチするエラーメッセージをチェックします。他の@code{save}や@code{load}のような例はC++で記述されており、Octave変数はすべて@samp{caller}のコンテキストにあり、@code{evalin}は必要ありません。

@c evalin libinterp/parse-tree/oct-parse.cc
@anchor{XREFevalin}
@deftypefn {Built-in Function} {} evalin (@var{context}, @var{try})
@deftypefnx {Built-in Function} {} evalin (@var{context}, @var{try}, @var{catch})
式が@qcode{"caller"}か@qcode{"base"}どちらか一方のコンテキスト@var{context}で評価されることを除外すれば、@code{eval}と同様です。
@seealso{@ref{XREFeval,,eval}, @ref{XREFassignin,,assignin}}
@end deftypefn


@c assignin libinterp/parse-tree/oct-parse.cc
@anchor{XREFassignin}
@deftypefn {Built-in Function} {} assignin (@var{context}, @var{varname}, @var{value})
@qcode{"base"}か@qcode{"caller"}どちらか一方のコンテキスト@var{context}で、@var{varname}に@var{value}を代入します。
@seealso{@ref{XREFevalin,,evalin}}
@end deftypefn

